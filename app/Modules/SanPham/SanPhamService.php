<?php

namespace App\Modules\SanPham;

use App\Models\SanPham;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\DB;
use Exception;
use App\Class\CustomResponse;
use App\Class\FilterWithPagination;
use App\Models\KhoTong;

class SanPhamService
{
  /**
   * L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu (ƒë√£ fix t·ªïng & ph√¢n trang an to√†n v·ªõi GROUP BY)
   */
  public function getAll(array $params = [])
  {
    try {
      // Query c∆° b·∫£n v·ªõi JOIN (gi·ªØ nguy√™n logic c≈©)
      $query = SanPham::query()
        ->withoutGlobalScopes(['withUserNames'])
        ->with('images', 'danhMuc:id,ten_danh_muc')
        ->leftJoin('users as nguoi_tao', 'san_phams.nguoi_tao', '=', 'nguoi_tao.id')
        ->leftJoin('users as nguoi_cap_nhat', 'san_phams.nguoi_cap_nhat', '=', 'nguoi_cap_nhat.id')
        ->leftJoin('chi_tiet_phieu_nhap_khos', 'san_phams.id', '=', 'chi_tiet_phieu_nhap_khos.san_pham_id')
        ->leftJoin('kho_tongs', 'san_phams.id', '=', 'kho_tongs.san_pham_id')
        // join b·∫£ng master ƒë·ªÉ l·∫•y t√™n hi·ªÉn th·ªã lo·∫°i s·∫£n ph·∫©m
        ->leftJoin('loai_san_pham_masters as lsp', 'lsp.code', '=', 'san_phams.loai_san_pham')
        ->groupBy('san_phams.id');

      // ƒê·ªçc tham s·ªë ph√¢n trang t·ª´ FE (h·ªó tr·ª£ c·∫£ limit v√† per_page)
      $page    = max(1, (int)($params['page']      ?? 1));
      $perPage = max(1, (int)($params['limit']     ?? ($params['per_page'] ?? 20)));

      // ===== (1) T√≠nh t·ªïng b·∫£n ghi th·∫≠t s·ª± =====
      // IMPORTANT: Khi ƒë·∫øm t·ªïng, c·∫ßn lo·∫°i b·ªè GROUP BY/ORDER BY kh·ªèi b·∫£n sao
      $countQuery = (clone $query);
      $base = $countQuery->getQuery();   // Query\Builder b√™n d∆∞·ªõi
      $base->groups = null;              // b·ªè GROUP BY
      $base->orders = null;              // tr√°nh l·ªói "ORDER BY without GROUP BY" khi COUNT
      $total = (int) $countQuery
        ->select(DB::raw('COUNT(DISTINCT san_phams.id) as agg_total'))
        ->value('agg_total');

      // ===== (2) L·∫•y d·ªØ li·ªáu trang hi·ªán t·∫°i =====
      $collection = $query
        ->select([
          'san_phams.*',
          // t√™n ng∆∞·ªùi t·∫°o/c·∫≠p nh·∫≠t
          'nguoi_tao.name as ten_nguoi_tao',
          'nguoi_cap_nhat.name as ten_nguoi_cap_nhat',
          // t·ªïng s·ªë l∆∞·ª£ng
          DB::raw('COALESCE(SUM(chi_tiet_phieu_nhap_khos.so_luong_nhap), 0) as tong_so_luong_nhap'),
          DB::raw('COALESCE(SUM(kho_tongs.so_luong_ton), 0) as tong_so_luong_thuc_te'),
          // t√™n lo·∫°i hi·ªÉn th·ªã
          DB::raw('COALESCE(lsp.ten_hien_thi, san_phams.loai_san_pham) as ten_loai'),
        ])
        ->forPage($page, $perPage)
        ->get();

      // ===== (3) Tr·∫£ v·ªÅ ƒë√∫ng c·∫•u tr√∫c c≈© ƒë·ªÉ FE kh√¥ng c·∫ßn thay ƒë·ªïi =====
      return [
        'data' => $collection,
        'total' => $total,
        'pagination' => [
          'current_page'  => $page,
          'last_page'     => max(1, (int) ceil($total / $perPage)),
          'from'          => ($total === 0) ? 0 : (($page - 1) * $perPage + 1),
          'to'            => min($page * $perPage, $total),
          'total_current' => $collection->count(),
        ]
      ];
    } catch (Exception $e) {
      throw new Exception('L·ªói khi l·∫•y danh s√°ch: ' . $e->getMessage());
    }
  }

  /**
   * L·∫•y d·ªØ li·ªáu theo ID
   */
  public function getById($id)
  {
    $data = SanPham::with([
      'images',
      'donViTinhs' => function ($query) {
        $query->withoutGlobalScope('withUserNames')->select('don_vi_tinhs.id as value', 'ten_don_vi as label');
      },
      'nhaCungCaps' => function ($query) {
        $query->withoutGlobalScope('withUserNames')->select('nha_cung_caps.id as value', 'ten_nha_cung_cap as label');
      },
      'danhMuc'
    ])->find($id);

    if (!$data) {
      return CustomResponse::error('D·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i');
    }
    return $data;
  }

  /**
   * T·∫°o m·ªõi d·ªØ li·ªáu
   */
  public function create(array $data)
  {
    try {
      $result = SanPham::create([
        'ma_san_pham'        => $data['ma_san_pham'],
        'ten_san_pham'       => $data['ten_san_pham'],
        'danh_muc_id'        => $data['danh_muc_id'],
        'gia_nhap_mac_dinh'  => $data['gia_nhap_mac_dinh'],
        'gia_dat_truoc_3n'   => $data['gia_dat_truoc_3n'] ?? 0, // M·ªöI
        'ty_le_chiet_khau'   => $data['ty_le_chiet_khau'],
        'muc_loi_nhuan'      => $data['muc_loi_nhuan'],
        'so_luong_canh_bao'  => $data['so_luong_canh_bao'],
        'loai_san_pham'      => $data['loai_san_pham'], // l∆∞u CODE ·ªïn ƒë·ªãnh
        'ghi_chu'            => $data['ghi_chu'] ?? null,
        'trang_thai'         => $data['trang_thai'],
      ]);

      if (isset($data['don_vi_tinh_id'])) {
        $result->donViTinhs()->attach($data['don_vi_tinh_id'], [
          'nguoi_tao' => Auth::user()->id,
          'nguoi_cap_nhat' => Auth::user()->id
        ]);
      }

      if (isset($data['nha_cung_cap_id'])) {
        $result->nhaCungCaps()->attach($data['nha_cung_cap_id'], [
          'nguoi_tao' => Auth::user()->id,
          'nguoi_cap_nhat' => Auth::user()->id
        ]);
      }

      // Th√™m ·∫£nh n·∫øu c√≥
      if (!empty($data['image'])) {
        $result->images()->create(['path' => $data['image']]);
      }

      return $result;
    } catch (Exception $e) {
      return CustomResponse::error($e->getMessage());
    }
  }

  /**
   * C·∫≠p nh·∫≠t d·ªØ li·ªáu
   */
  public function update($id, array $data)
  {
    try {
      $model = SanPham::findOrFail($id);

      $sanPhamData = $data;
      unset($sanPhamData['don_vi_tinh_id'], $sanPhamData['nha_cung_cap_id']);

      $model->update($sanPhamData);

      // C·∫≠p nh·∫≠t ·∫£nh n·∫øu c√≥
      if (!empty($data['image'])) {
        $model->images()->get()->each(function ($image) use ($data) {
          $image->update(['path' => $data['image']]);
        });
      }

      if (isset($data['don_vi_tinh_id'])) {
        $ids = is_array($data['don_vi_tinh_id']) ? $data['don_vi_tinh_id'] : [$data['don_vi_tinh_id']];
        $ids = array_map('intval', $ids);

        // build pivot data: id => ['nguoi_tao' => ..., 'nguoi_cap_nhat' => ...]
        $pivot = [];
        foreach ($ids as $idDvt) {
          $pivot[$idDvt] = [
            'nguoi_tao'      => Auth::id(),
            'nguoi_cap_nhat' => Auth::id(),
          ];
        }

        // d√πng sync v·ªõi pivot values
        $model->donViTinhs()->sync($pivot);
      }

      if (isset($data['nha_cung_cap_id'])) {
        $ids = is_array($data['nha_cung_cap_id']) ? $data['nha_cung_cap_id'] : [$data['nha_cung_cap_id']];
        $ids = array_map('intval', $ids);

        $pivot = [];
        foreach ($ids as $idNcc) {
          $pivot[$idNcc] = [
            'nguoi_tao'      => Auth::id(),
            'nguoi_cap_nhat' => Auth::id(),
          ];
        }

        $model->nhaCungCaps()->sync($pivot);
      }

      return $model->fresh();
    } catch (Exception $e) {
      return CustomResponse::error($e->getMessage());
    }
  }

  /**
   * X√≥a d·ªØ li·ªáu
   */
  public function delete($id)
  {
    try {
      $model = SanPham::findOrFail($id);

      // X√≥a ·∫£nh n·∫øu c√≥
      $model->images()->get()->each(function ($image) {
        $image->delete();
      });

      $model->donViTinhs()->detach();
      $model->nhaCungCaps()->detach();

      return $model->delete();
    } catch (Exception $e) {
      return CustomResponse::error($e->getMessage());
    }
  }

  /**
   * L·∫•y danh s√°ch SanPham d·∫°ng option
   * - label: T√™n s·∫£n ph·∫©m (T√™n lo·∫°i hi·ªÉn th·ªã)
   */
  /**
   * L·∫•y danh s√°ch SanPham d·∫°ng option cho combobox (t·∫°o ƒë∆°n h√†ng)
   * - H·ªó tr·ª£ t√¨m theo M√É SP (∆∞u ti√™n) v√† theo T√äN (kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng)
   * - Tham s·ªë h·ªó tr·ª£: search | q | keyword
   * - Tr·∫£ v·ªÅ: [{ value: id, label: "T√™n SP - <M√É> (T√™n lo·∫°i)" }, ...]
   * - Gi·ªõi h·∫°n 50 d√≤ng ƒë·ªÉ dropdown nh·∫π
   */
  /**
 * L·∫•y danh s√°ch SanPham d·∫°ng option cho combobox (t·∫°o ƒë∆°n h√†ng)
 * - T√¨m theo M√É (∆∞u ti√™n) & theo T√äN
 * - Tham s·ªë h·ªó tr·ª£: search | q | keyword
 * - Kh√¥ng l·∫∑p m√£ ·ªü cu·ªëi label n·∫øu t√™n ƒë√£ ch·ª©a m√£
 * - Gi·ªõi h·∫°n 50 d√≤ng
 */
/**
 * L·∫•y danh s√°ch SanPham cho combobox (t·∫°o ƒë∆°n h√†ng)
 * - Khi ng∆∞·ªùi d√πng g√µ S·ªê: ch·ªâ t√¨m theo M√É (5 s·ªë, nh∆∞ng h·ªó tr·ª£ g√µ m·ªôt ph·∫ßn: =, prefix, contains)
 * - Khi g√µ CH·ªÆ: t√¨m theo T√äN (kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng)
 * - Tr·∫£ v·ªÅ: [{ value: id, label: "T√™n SP - M√É" }]
 * - Gi·ªõi h·∫°n 50 d√≤ng
 */
public function getOptions(array $params = [])
{
    $qRaw = trim((string)($params['search'] ?? $params['q'] ?? $params['keyword'] ?? ''));
    $q    = mb_strtolower($qRaw, 'UTF-8');
    $digits = preg_replace('/\D+/', '', $qRaw); // l·∫•y ph·∫ßn s·ªë ng∆∞·ªùi d√πng nh·∫≠p

    $query = SanPham::query()->withoutGlobalScopes(['withUserNames']);

    if ($q !== '') {
        $isNumeric = ($digits !== '') && ctype_digit($digits);

        if ($isNumeric) {
            // üëâ Ch·ªâ t√¨m theo M√É
            $query->where(function ($x) use ($digits) {
                $x->where('san_phams.ma_san_pham', '=', $digits)          // kh·ªõp tuy·ªát ƒë·ªëi
                  ->orWhere('san_phams.ma_san_pham', 'like', $digits.'%') // b·∫Øt ƒë·∫ßu b·∫±ng
                  ->orWhere('san_phams.ma_san_pham', 'like', '%'.$digits.'%'); // ch·ª©a
            });

            // ∆Øu ti√™n: =  ‚Üí prefix ‚Üí contains
            $query->orderByRaw('CASE 
                WHEN san_phams.ma_san_pham = ? THEN 0
                WHEN san_phams.ma_san_pham LIKE ? THEN 1
                ELSE 2 END', [$digits, $digits.'%'])
                  ->orderBy('san_phams.ma_san_pham');
        } else {
            // üëâ T√¨m theo t√™n (kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng)
            $query->whereRaw('LOWER(san_phams.ten_san_pham) LIKE ?', ['%'.$q.'%'])
                  ->orderBy('san_phams.ten_san_pham');
        }
    } else {
        $query->orderBy('san_phams.ten_san_pham');
    }

    $rows = $query->select([
            'san_phams.id',
            'san_phams.ma_san_pham',
            'san_phams.ten_san_pham',
        ])
        ->limit(50)
        ->get();

    // Label: "T√™n SP - M√É" (tr√°nh l·∫∑p m√£ n·∫øu t√™n ƒë√£ c√≥ m√£ s·∫µn)
    return $rows->map(function ($r) {
        $name = (string)$r->ten_san_pham;
        $code = (string)$r->ma_san_pham;
        $hasCodeInName = (bool)preg_match('/(^|[^0-9])'.preg_quote($code,'/').'($|[^0-9])/u', $name);
        $label = $hasCodeInName ? $name : "{$name} - {$code}";
        return ['value' => (int)$r->id, 'label' => $label];
    });
}


  /**
   * L·∫•y danh s√°ch SanPham d·∫°ng option theo NhaCungCap
   * - lo·∫°i b·ªè SP_SX khi l·ªçc NCC
   * - label: T√™n s·∫£n ph·∫©m (T√™n lo·∫°i hi·ªÉn th·ªã)
   */
  public function getOptionsByNhaCungCap($nhaCungCapId)
  {
    return SanPham::whereHas('nhaCungCaps', function ($query) use ($nhaCungCapId) {
        $query->withoutGlobalScope('withUserNames')
          ->where('nha_cung_caps.id', $nhaCungCapId)
          ->where('san_phams.loai_san_pham', '!=', 'SP_SAN_XUAT');
      })
      ->withoutGlobalScope('withUserNames')
      ->leftJoin('loai_san_pham_masters as lsp', 'lsp.code', '=', 'san_phams.loai_san_pham')
      ->select(
        'san_phams.id as value',
        DB::raw('CONCAT(san_phams.ten_san_pham, " (", COALESCE(lsp.ten_hien_thi, san_phams.loai_san_pham), ")") as label')
      )
      ->get();
  }

  /**
   * L·∫•y danh s√°ch L√¥ S·∫£n Ph·∫©m d·∫°ng option theo S·∫£n ph·∫©m
   */
  public function getOptionsLoSanPhamBySanPhamIdAndDonViTinhId($sanPhamId, $donViTinhId)
  {
    $loSanPham = KhoTong::where('kho_tongs.san_pham_id', $sanPhamId)
      ->where('kho_tongs.don_vi_tinh_id', $donViTinhId)
      ->leftJoin('chi_tiet_phieu_nhap_khos', 'kho_tongs.ma_lo_san_pham', '=', 'chi_tiet_phieu_nhap_khos.ma_lo_san_pham')
      ->withoutGlobalScope('withUserNames')
      ->select(
        'kho_tongs.ma_lo_san_pham as value',
        DB::raw('CONCAT(kho_tongs.ma_lo_san_pham, " - NSX: ", DATE_FORMAT(chi_tiet_phieu_nhap_khos.ngay_san_xuat, "%d/%m/%Y"), " - HSD: ", DATE_FORMAT(chi_tiet_phieu_nhap_khos.ngay_het_han, "%d/%m/%Y"), " - SL T·ªìn: ", kho_tongs.so_luong_ton, " - HSD C√≤n l·∫°i: ", DATEDIFF(chi_tiet_phieu_nhap_khos.ngay_het_han, CURDATE()), " ng√†y") as label'),
        DB::raw('DATEDIFF(chi_tiet_phieu_nhap_khos.ngay_het_han, CURDATE()) as hsd_con_lai')
      )
      ->orderBy('hsd_con_lai', 'asc')
      ->get();

    return $loSanPham;
  }
}
