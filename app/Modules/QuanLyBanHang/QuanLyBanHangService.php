<?php

namespace App\Modules\QuanLyBanHang;

use App\Class\CustomResponse;
use App\Class\FilterWithPagination;
use App\Models\ChiTietDonHang;
use App\Models\ChiTietPhieuNhapKho;
use App\Models\DonHang;
use App\Models\KhachHang;
use App\Models\SanPham;
use Exception;
use Illuminate\Support\Facades\DB;
use Carbon\Carbon;

class QuanLyBanHangService
{
    /**
     * L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu
     */
    public function getAll(array $params = [])
    {
        try {
            // T·∫°o query c∆° b·∫£n
            $query = DonHang::query()->with('images');

            // S·ª≠ d·ª•ng FilterWithPagination ƒë·ªÉ x·ª≠ l√Ω filter v√† pagination
            $result = FilterWithPagination::findWithPagination(
                $query,
                $params,
                ['don_hangs.*'] // Columns c·∫ßn select
            );

            return [
                'data' => $result['collection'],
                'total' => $result['total'],
                'pagination' => [
                    'current_page' => $result['current_page'],
                    'last_page' => $result['last_page'],
                    'from' => $result['from'],
                    'to' => $result['to'],
                    'total_current' => $result['total_current'],
                ],
            ];
        } catch (Exception $e) {
            throw new Exception('L·ªói khi l·∫•y danh s√°ch: ' . $e->getMessage());
        }
    }

    /**
     * L·∫•y d·ªØ li·ªáu theo ID
     */
    public function getById($id)
    {
        $data = DonHang::with('khachHang', 'chiTietDonHangs.sanPham', 'chiTietDonHangs.donViTinh')->find($id);
        if (!$data) {
            return CustomResponse::error('D·ªØ li·ªáu kh√¥ng t·ªìn t·∫°i');
        }

        return $data;
    }

    /**
     * Chu·∫©n ho√° thanh to√°n theo lo·∫°i thanh to√°n (an to√†n d·ªØ li·ªáu)
     * - loai_thanh_toan: 0=Ch∆∞a TT, 1=TT m·ªôt ph·∫ßn, 2=TT to√†n b·ªô
     * - ch·ªâ thi·∫øt l·∫≠p so_tien_da_thanh_toan & trang_thai_thanh_toan
     * - KH√îNG ghi so_tien_con_lai v√†o DB (tr√°nh y√™u c·∫ßu th√™m c·ªôt)
     */
    private function normalizePayments(array &$data, int $tongTienCanThanhToan): void
    {
        $loai = (int)($data['loai_thanh_toan'] ?? 0);
        $daTT = (int)($data['so_tien_da_thanh_toan'] ?? 0);

        if ($loai === 0) {
            // Ch∆∞a thanh to√°n
            $daTT = 0;
        } elseif ($loai === 2) {
            // Thanh to√°n to√†n b·ªô
            $daTT = $tongTienCanThanhToan;
        } else {
            // Thanh to√°n m·ªôt ph·∫ßn: k·∫πp 0..t·ªïng
            if ($daTT < 0) $daTT = 0;
            if ($daTT > $tongTienCanThanhToan) $daTT = $tongTienCanThanhToan;
        }

        $data['so_tien_da_thanh_toan'] = $daTT;

        // D·∫´n xu·∫•t "c√≤n l·∫°i" ƒë·ªÉ quy·∫øt ƒë·ªãnh tr·∫°ng th√°i (kh√¥ng l∆∞u DB)
// D·∫´n xu·∫•t "c√≤n l·∫°i" ƒë·ªÉ quy·∫øt ƒë·ªãnh tr·∫°ng th√°i (kh√¥ng l∆∞u DB)
$conLai = max(0, $tongTienCanThanhToan - $daTT);
/**
 * Quy ∆∞·ªõc chu·∫©n:
 * 0 = ch∆∞a thanh to√°n
 * 1 = thanh to√°n m·ªôt ph·∫ßn
 * 2 = ƒë√£ thanh to√°n ƒë·ªß
 */
if ($daTT <= 0) {
    $data['trang_thai_thanh_toan'] = 0;
} elseif ($conLai > 0) {
    $data['trang_thai_thanh_toan'] = 1;
} else {
    $data['trang_thai_thanh_toan'] = 2;
}


        // Ph√≤ng th·ªß: n·∫øu ph√≠a FE g·ª≠i so_tien_con_lai, lo·∫°i b·ªè tr∆∞·ªõc khi create/update
        unset($data['so_tien_con_lai']);
    }

    /**
     * Chu·∫©n ho√° th√¥ng tin ng∆∞·ªùi nh·∫≠n (T√™n/SƒêT/Ng√†y gi·ªù nh·∫≠n)
     * - Kh√¥ng b·∫Øt bu·ªôc 3 field n√†y; ch·ªâ x·ª≠ l√Ω khi c√≥
     * - Ng√†y gi·ªù nh·∫≠n: nh·∫≠n m·ªçi ƒë·ªãnh d·∫°ng h·ª£p l·ªá v√† chu·∫©n ho√° 'Y-m-d H:i:s'
     */
    private function normalizeRecipientFields(array &$data): void
    {
        if (array_key_exists('nguoi_nhan_ten', $data) && $data['nguoi_nhan_ten'] !== null) {
            $data['nguoi_nhan_ten'] = trim((string)$data['nguoi_nhan_ten']);
        }

        if (array_key_exists('nguoi_nhan_sdt', $data) && $data['nguoi_nhan_sdt'] !== null) {
            $data['nguoi_nhan_sdt'] = trim((string)$data['nguoi_nhan_sdt']);
        }

        if (array_key_exists('nguoi_nhan_thoi_gian', $data)) {
            $raw = $data['nguoi_nhan_thoi_gian'];

            if ($raw === null || $raw === '') {
                $data['nguoi_nhan_thoi_gian'] = null;
            } else {
                try {
                    // H·ªó tr·ª£ c·∫£ ISO string / timestamp / date string
                    $dt = $raw instanceof \DateTimeInterface ? Carbon::instance($raw) : Carbon::parse($raw);
                    $data['nguoi_nhan_thoi_gian'] = $dt->format('Y-m-d H:i:s');
                } catch (\Throwable $e) {
                    // N·∫øu parse l·ªói, ƒë·ªÉ null ƒë·ªÉ kh√¥ng l√†m h·ªèng request
                    $data['nguoi_nhan_thoi_gian'] = null;
                }
            }
        }
    }

    /**
     * T·∫°o m·ªõi d·ªØ li·ªáu
     */
    public function create(array $data)
    {
        DB::beginTransaction();
        try {
            $tongTienHang = 0;

            foreach ($data['danh_sach_san_pham'] as $index => $item) {
                // ‚úÖ Ghi l·∫°i lo·∫°i gi√° (default 1 n·∫øu thi·∫øu t·ª´ FE)
                $data['danh_sach_san_pham'][$index]['loai_gia'] = $item['loai_gia'] ?? 1;

                $loSanPham = ChiTietPhieuNhapKho::where('san_pham_id', $item['san_pham_id'])
                    ->where('don_vi_tinh_id', $item['don_vi_tinh_id'])
                    ->orderBy('id', 'asc')
                    ->first();

                if ($loSanPham) {
                    $data['danh_sach_san_pham'][$index]['don_gia'] = (int)$loSanPham->gia_ban_le_don_vi;
                    $data['danh_sach_san_pham'][$index]['thanh_tien'] = (int)$item['so_luong'] * (int)$data['danh_sach_san_pham'][$index]['don_gia'];
                } else {
                    $sanPham = SanPham::find($item['san_pham_id']);
                    if ($sanPham) {
                        // 1 = ƒê·∫∑t ngay ‚Üí gia_nhap_mac_dinh
                        // 2 = ƒê·∫∑t tr∆∞·ªõc 3 ng√†y ‚Üí gia_dat_truoc_3n
                        $base = (int)((isset($item['loai_gia']) && (int)$item['loai_gia'] === 2)
                            ? ($sanPham->gia_dat_truoc_3n ?? 0)
                            : ($sanPham->gia_nhap_mac_dinh ?? 0));

                        $data['danh_sach_san_pham'][$index]['don_gia']    = $base;
                        $data['danh_sach_san_pham'][$index]['thanh_tien'] = (int)$item['so_luong'] * $base;
                    } else {
                        throw new Exception('S·∫£n ph·∫©m ' . $item['san_pham_id'] . ' kh√¥ng t·ªìn t·∫°i');
                    }
                }

                $tongTienHang += (int)$data['danh_sach_san_pham'][$index]['thanh_tien'];
            }

            $giamGia = (int)($data['giam_gia'] ?? 0);
            $chiPhi  = (int)($data['chi_phi'] ?? 0);

            // Kh√¥ng d√πng VAT: t·ªïng c·∫ßn thanh to√°n = t·ªïng h√†ng - gi·∫£m gi√° + chi ph√≠ (k·∫πp >= 0)
            $tongTienCanThanhToan = max(0, (int)$tongTienHang - $giamGia + $chiPhi);

            // Chu·∫©n ho√° theo lo·∫°i thanh to√°n (k·∫πp an to√†n)
            $this->normalizePayments($data, $tongTienCanThanhToan);

            // ‚úÖ Chu·∫©n ho√° th√¥ng tin ng∆∞·ªùi nh·∫≠n (T√™n/SƒêT/Ng√†y gi·ªù nh·∫≠n)
            $this->normalizeRecipientFields($data);
// ===== NEW: Chu·∫©n ho√° tr·∫°ng th√°i ƒë∆°n h√†ng (0=Ch∆∞a giao,1=ƒêang giao,2=ƒê√£ giao,3=ƒê√£ h·ªßy) =====
if (!array_key_exists('trang_thai_don_hang', $data) || $data['trang_thai_don_hang'] === null || $data['trang_thai_don_hang'] === '') {
    $data['trang_thai_don_hang'] = DonHang::TRANG_THAI_CHUA_GIAO; // default = 0
} else {
    $v = (int)$data['trang_thai_don_hang'];
    $data['trang_thai_don_hang'] = in_array($v, [
        DonHang::TRANG_THAI_CHUA_GIAO,
        DonHang::TRANG_THAI_DANG_GIAO,
        DonHang::TRANG_THAI_DA_GIAO,
        DonHang::TRANG_THAI_DA_HUY,
    ], true) ? $v : DonHang::TRANG_THAI_CHUA_GIAO;
}

            $data['tong_tien_hang'] = (int)$tongTienHang;
            $data['tong_tien_can_thanh_toan'] = (int)$tongTienCanThanhToan;
            $data['tong_so_luong_san_pham'] = count($data['danh_sach_san_pham']);

            if (isset($data['khach_hang_id']) && $data['khach_hang_id'] != null) {
                $khachHang = KhachHang::find($data['khach_hang_id']);
                if ($khachHang) {
                    $data['ten_khach_hang'] = $khachHang->ten_khach_hang;
                    $data['so_dien_thoai'] = $khachHang->so_dien_thoai;
                }
            }

            // ‚ö†Ô∏è Quan tr·ªçng: KH√îNG nh·∫≠n ma_don_hang t·ª´ request (BE t·ª± sinh)
            $dataDonHang = $data;
            unset(
                $dataDonHang['danh_sach_san_pham'],
                $dataDonHang['so_tien_con_lai'],
                $dataDonHang['ma_don_hang'] // <- th√™m ph√≤ng th·ªß
            );

            $donHang = DonHang::create($dataDonHang);

            // üîí Fallback an to√†n: n·∫øu hook created() ch∆∞a g√°n m√£, t·ª± g√°n t·∫°i ƒë√¢y
            if (empty($donHang->ma_don_hang)) {
                $donHang->ma_don_hang = 'DH' . str_pad((string)$donHang->id, 5, '0', STR_PAD_LEFT);
                $donHang->saveQuietly();
            }

            foreach ($data['danh_sach_san_pham'] as $item) {
                $item['don_hang_id'] = $donHang->id;
                ChiTietDonHang::create($item);
            }

            DB::commit();
            // refresh ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ ma_don_hang (t·ª´ hook ho·∫∑c fallback)
            return $donHang->refresh();
        } catch (Exception $e) {
            DB::rollBack();
            return CustomResponse::error($e->getMessage());
        }
    }

    /**
     * C·∫≠p nh·∫≠t d·ªØ li·ªáu
     */
    public function update($id, array $data)
    {
        DB::beginTransaction();
        $donHang = $this->getById($id);

        // ‚õîÔ∏è G·ª† CH·∫∂N: cho ph√©p c·∫≠p nh·∫≠t d√π ƒë√£ c√≥ phi·∫øu thu.
        // Observer DonHang s·∫Ω t·ª± sinh PHI·∫æU HI·ªÜU CH·ªàNH ƒë·ªÉ c√¢n ƒë·ªëi ‚Üí kh√¥ng c·∫ßn ch·∫∑n ·ªü ƒë√¢y‡•§

        try {
            $tongTienHang = 0;

            foreach ($data['danh_sach_san_pham'] as $index => $item) {
                // ‚úÖ Ghi l·∫°i lo·∫°i gi√° khi c·∫≠p nh·∫≠t (default 1 n·∫øu thi·∫øu)
                $data['danh_sach_san_pham'][$index]['loai_gia'] = $item['loai_gia'] ?? 1;

                $loSanPham = ChiTietPhieuNhapKho::where('san_pham_id', $item['san_pham_id'])
                    ->where('don_vi_tinh_id', $item['don_vi_tinh_id'])
                    ->orderBy('id', 'asc')
                    ->first();

                if ($loSanPham) {
                    $data['danh_sach_san_pham'][$index]['don_gia'] = (int)$loSanPham->gia_ban_le_don_vi;
                    $data['danh_sach_san_pham'][$index]['thanh_tien'] = (int)$item['so_luong'] * (int)$data['danh_sach_san_pham'][$index]['don_gia'];
                } else {
                    $sanPham = SanPham::find($item['san_pham_id']);
                    if ($sanPham) {
                        // 1 = ƒê·∫∑t ngay ‚Üí gia_nhap_mac_dinh
                        // 2 = ƒê·∫∑t tr∆∞·ªõc 3 ng√†y ‚Üí gia_dat_truoc_3n
                        $base = (int)((isset($item['loai_gia']) && (int)$item['loai_gia'] === 2)
                            ? ($sanPham->gia_dat_truoc_3n ?? 0)
                            : ($sanPham->gia_nhap_mac_dinh ?? 0));

                        $data['danh_sach_san_pham'][$index]['don_gia']    = $base;
                        $data['danh_sach_san_pham'][$index]['thanh_tien'] = (int)$item['so_luong'] * $base;
                    } else {
                        throw new Exception('S·∫£n ph·∫©m ' . $item['san_pham_id'] . ' kh√¥ng t·ªìn t·∫°i');
                    }
                }

                $tongTienHang += (int)$data['danh_sach_san_pham'][$index]['thanh_tien'];
            }

            $giamGia = (int)($data['giam_gia'] ?? 0);
            $chiPhi  = (int)($data['chi_phi'] ?? 0);

            // Kh√¥ng d√πng VAT
            $tongTienCanThanhToan = max(0, (int)$tongTienHang - $giamGia + $chiPhi);

            // Chu·∫©n ho√° theo lo·∫°i thanh to√°n (k·∫πp an to√†n)
            $this->normalizePayments($data, $tongTienCanThanhToan);

            // ‚úÖ Chu·∫©n ho√° th√¥ng tin ng∆∞·ªùi nh·∫≠n (T√™n/SƒêT/Ng√†y gi·ªù nh·∫≠n)
            $this->normalizeRecipientFields($data);
// ===== NEW: Chu·∫©n ho√° tr·∫°ng th√°i ƒë∆°n h√†ng (0=Ch∆∞a giao,1=ƒêang giao,2=ƒê√£ giao,3=ƒê√£ h·ªßy) =====
if (array_key_exists('trang_thai_don_hang', $data)) {
    if ($data['trang_thai_don_hang'] === null || $data['trang_thai_don_hang'] === '') {
        // n·∫øu FE c·ªë √Ω g·ª≠i r·ªóng ‚Üí ƒë·∫∑t v·ªÅ default 0 ƒë·ªÉ d·ªØ li·ªáu nh·∫•t qu√°n
        $data['trang_thai_don_hang'] = DonHang::TRANG_THAI_CHUA_GIAO;
    } else {
        $v = (int)$data['trang_thai_don_hang'];
        $data['trang_thai_don_hang'] = in_array($v, [
            DonHang::TRANG_THAI_CHUA_GIAO,
            DonHang::TRANG_THAI_DANG_GIAO,
            DonHang::TRANG_THAI_DA_GIAO,
            DonHang::TRANG_THAI_DA_HUY,
        ], true) ? $v : DonHang::TRANG_THAI_CHUA_GIAO;
    }
}
// n·∫øu FE kh√¥ng g·ª≠i field n√†y th√¨ gi·ªØ nguy√™n tr·∫°ng th√°i hi·ªán c√≥ c·ªßa ƒë∆°n

            $data['tong_tien_hang'] = (int)$tongTienHang;
            $data['tong_tien_can_thanh_toan'] = (int)$tongTienCanThanhToan;
            $data['tong_so_luong_san_pham'] = count($data['danh_sach_san_pham']);

            if (isset($data['khach_hang_id']) && $data['khach_hang_id'] != null) {
                $khachHang = KhachHang::find($data['khach_hang_id']);
                if ($khachHang) {
                    $data['ten_khach_hang'] = $khachHang->ten_khach_hang;
                    $data['so_dien_thoai'] = $khachHang->so_dien_thoai;
                }
            }

            // ‚ö†Ô∏è Quan tr·ªçng: KH√îNG cho update tr·ª±c ti·∫øp tr∆∞·ªùng m√£ (ƒë√£ sinh c·ªë ƒë·ªãnh)
            $dataDonHang = $data;
            unset(
                $dataDonHang['danh_sach_san_pham'],
                $dataDonHang['so_tien_con_lai'],
                $dataDonHang['ma_don_hang'] // <- ph√≤ng th·ªß
            );

            $donHang->update($dataDonHang);

            // L√†m m·ªõi chi ti·∫øt
            $donHang->chiTietDonHangs()->delete();
            foreach ($data['danh_sach_san_pham'] as $item) {
                $item['don_hang_id'] = $donHang->id;
                ChiTietDonHang::create($item);
            }

            DB::commit();
            return $donHang->refresh();
        } catch (Exception $e) {
            DB::rollBack();
            return CustomResponse::error($e->getMessage());
        }
    }

    /**
     * X√≥a d·ªØ li·ªáu
     */
    public function delete($id)
    {
        try {
            $donHang = $this->getById($id);

            if ($donHang->phieuThu()->exists() || $donHang->chiTietPhieuThu()->exists()) {
                throw new Exception('ƒê∆°n h√†ng ƒë√£ c√≥ phi·∫øu thu, kh√¥ng th·ªÉ x√≥a');
            }

            $donHang->chiTietDonHangs()->delete();

            return $donHang->delete();
        } catch (Exception $e) {
            return CustomResponse::error($e->getMessage());
        }
    }

    /**
     * L·∫•y danh s√°ch QuanLyBanHang d·∫°ng option
     */
    public function getOptions(array $params = [])
    {
        $query = DonHang::query();

        $result = FilterWithPagination::findWithPagination(
            $query,
            $params,
            ['don_hangs.id as value', 'don_hangs.ma_don_hang as label']
        );

        return $result['collection'];
    }

    /**
     * L·∫•y gi√° b√°n s·∫£n ph·∫©m
     * Gi·ªØ t∆∞∆°ng th√≠ch c≈©, th√™m tham s·ªë $loaiGia (1 = ƒê·∫∑t ngay, 2 = ƒê·∫∑t tr∆∞·ªõc 3 ng√†y).
     * - N·∫øu c√≥ l√¥ nh·∫≠p kho: ∆∞u ti√™n tr·∫£ gi√° l·∫ª theo l√¥ (logic c≈©).
     * - N·∫øu kh√¥ng c√≥ l√¥: ch·ªçn theo lo·∫°i gi√° ƒë·ªãnh tr∆∞·ªõc.
     */
    public function getGiaBanSanPham($sanPhamId, $donViTinhId, $loaiGia = 1)
    {
        // ∆Øu ti√™n gi√° theo l√¥ (gi·ªØ nguy√™n h√†nh vi c≈©)
        $loSanPham = ChiTietPhieuNhapKho::where('san_pham_id', $sanPhamId)
            ->where('don_vi_tinh_id', $donViTinhId)
            ->orderBy('id', 'asc')
            ->first();

        if ($loSanPham) {
            return (int)$loSanPham->gia_ban_le_don_vi;
        }

        // Kh√¥ng c√≥ l√¥ ‚Üí ch·ªçn gi√° theo lo·∫°i (gi·ªØ nguy√™n t√™n c·ªôt nh∆∞ code c≈©)
        $sanPham = SanPham::find($sanPhamId);
        if ($sanPham) {
            $base = (int)($loaiGia == 2
                ? ($sanPham->gia_dat_truoc_3n ?? 0)    // GI·ªÆ t√™n c·ªôt c≈©
                : ($sanPham->gia_nhap_mac_dinh ?? 0)); // GI·ªÆ t√™n c·ªôt c≈©

            // ‚ùå Kh√¥ng c·ªông/nh√¢n th√™m l·ª£i nhu·∫≠n ·ªü ƒë√¢y (ƒë∆°n gi√° ƒë√£ chu·∫©n)
            return $base;
        }

        return null;
    }

    /**
     * Xem tr∆∞·ªõc h√≥a ƒë∆°n (HTML)
     */
    public function xemTruocHoaDon($id)
    {
        try {
            $donHang = $this->getById($id);

            if (!$donHang) {
                return CustomResponse::error('ƒê∆°n h√†ng kh√¥ng t·ªìn t·∫°i');
            }

            return view('hoa-don.template', compact('donHang'));
        } catch (Exception $e) {
            return CustomResponse::error('L·ªói khi xem tr∆∞·ªõc h√≥a ƒë∆°n: ' . $e->getMessage());
        }
    }

    public function getSanPhamByDonHangId($donHangId)
    {
        return DonHang::with('chiTietDonHangs.sanPham', 'chiTietDonHangs.donViTinh')->where('id', $donHangId)->first();
    }

    public function getDonHangByKhachHangId($khachHangId)
    {
        return DonHang::with('khachHang')->where('khach_hang_id', $khachHangId)->where('trang_thai_thanh_toan', 0)->get();
    }

    public function getSoTienCanThanhToan($donHangId)
    {
        $donHang = $this->getById($donHangId);
        return (int)$donHang->tong_tien_can_thanh_toan - (int)$donHang->so_tien_da_thanh_toan;
        // N·∫øu b·∫°n ƒë√£ th√™m accessor getSoTienConLaiAttribute() trong DonHang,
        // c√≥ th·ªÉ tr·∫£ v·ªÅ $donHang->so_tien_con_lai cho UI/in ho√° ƒë∆°n.
    }
}
