<?php

namespace App\Modules\QuanLyBanHang;

use App\Http\Controllers\Controller;
use App\Modules\QuanLyBanHang\Validates\CreateQuanLyBanHangRequest;
use App\Modules\QuanLyBanHang\Validates\UpdateQuanLyBanHangRequest;
use App\Class\CustomResponse;
use App\Class\Helper;
use Illuminate\Http\Request;
use Maatwebsite\Excel\Facades\Excel;
use App\Imports\QuanLyBanHangImport;
use Illuminate\Support\Str;

// üîΩ B·ªî SUNG: g·ªçi service ghi nh·∫≠n bi·∫øn ƒë·ªông ƒëi·ªÉm khi ƒë∆°n ƒë√£ thanh to√°n
use App\Services\MemberPointService;

class QuanLyBanHangController extends Controller
{
  protected $quanLyBanHangService;

  public function __construct(QuanLyBanHangService $quanLyBanHangService)
  {
    $this->quanLyBanHangService = $quanLyBanHangService;
  }

  /**
   * L·∫•y danh s√°ch QuanLyBanHangs
   */
  public function index(Request $request)
  {
    $params = $request->all();

    // X·ª≠ l√Ω v√† validate parameters
    $params = Helper::validateFilterParams($params);

    $result = $this->quanLyBanHangService->getAll($params);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return CustomResponse::success([
      'collection' => $result['data'],
      'total' => $result['total'],
      'pagination' => $result['pagination'] ?? null
    ]);
  }

  /**
   * L·∫•y gi√° b√°n s·∫£n ph·∫©m theo l·ª±a ch·ªçn
   * Body: san_pham_id, don_vi_tinh_id, loai_gia (1=ƒê·∫∑t ngay, 2=ƒê·∫∑t tr∆∞·ªõc 3 ng√†y)
   */
  public function getGiaBanSanPham(Request $request)
  {
    // ‚úÖ validate & nh·∫≠n th√™m loai_gia
    $validated = $request->validate([
      'san_pham_id'    => 'required|integer|exists:san_phams,id',
      'don_vi_tinh_id' => 'required|integer',
      'loai_gia'       => 'required|integer|in:1,2',
    ]);

    $result = $this->quanLyBanHangService->getGiaBanSanPham(
      (int) $validated['san_pham_id'],
      (int) $validated['don_vi_tinh_id'],
      (int) $validated['loai_gia']
    );

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return CustomResponse::success($result);
  }

  /**
   * T·∫°o m·ªõi QuanLyBanHang
   * - KH√îNG nh·∫≠n ma_don_hang t·ª´ request (BE t·ª± sinh theo id)
   */
  public function store(CreateQuanLyBanHangRequest $request)
  {
    // üîí Ph√≤ng th·ªß: lo·∫°i b·ªè ma_don_hang n·∫øu FE g·ª≠i l√™n
    $payload = $request->validated();
    unset($payload['ma_don_hang']);

$result = $this->quanLyBanHangService->create($payload);

if ($result instanceof \Illuminate\Http\JsonResponse) {
  return $result;
}

// üîΩ G·ªçi ghi ƒëi·ªÉm (an to√†n & idempotent)
$this->tryRecordPaidEvent((int) $result->id);

// Service ƒë√£ return ->refresh() n√™n ƒë·∫£m b·∫£o c√≥ ma_don_hang trong response
return CustomResponse::success($result, 'T·∫°o m·ªõi th√†nh c√¥ng');

  }

  /**
   * L·∫•y th√¥ng tin QuanLyBanHang
   */
  public function show($id)
  {
    $result = $this->quanLyBanHangService->getById($id);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return CustomResponse::success($result);
  }

  /**
   * C·∫≠p nh·∫≠t QuanLyBanHang
   * ‚ûï (B·ªî SUNG HOOK AN TO√ÄN)
   * Sau khi update th√†nh c√¥ng, g·ªçi MemberPointService ƒë·ªÉ ghi nh·∫≠n "bi·∫øn ƒë·ªông ƒëi·ªÉm"
   * n·∫øu v√† ch·ªâ n·∫øu ƒë∆°n ƒë√£ ·ªü tr·∫°ng th√°i "ƒë√£ thanh to√°n". Service s·∫Ω t·ª± ki·ªÉm tra:
   * - tr·∫°ng th√°i thanh to√°n hi·ªán t·∫°i c·ªßa ƒë∆°n (kh√¥ng ph·∫£i ·ªü FE),
   * - idempotency theo don_hang_id (1 ƒë∆°n ch·ªâ t·∫°o 1 bi·∫øn ƒë·ªông),
   * - t√≠nh doanh thu, quy ƒë·ªïi ƒëi·ªÉm (1 ƒëi·ªÉm = 1.000 VND),
   * - kh√¥ng g·ª≠i ZNS ·ªü ƒë√¢y (ƒë·ªÉ anh ch·ªß ƒë·ªông g·ª≠i trong UI).
   */
  public function update(UpdateQuanLyBanHangRequest $request, $id)
  {
    // üîí ph√≤ng th·ªß t∆∞∆°ng t·ª± (tr√°nh s·ª≠a m√£)
    $payload = $request->validated();
    unset($payload['ma_don_hang']);

    $result = $this->quanLyBanHangService->update($id, $payload);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    // üîΩ HOOK M·ªÄM: an to√†n, kh√¥ng ph√° flow c≈©, kh√¥ng throw l·ªói ra ngo√†i.
    $this->tryRecordPaidEvent((int) $id);

    return CustomResponse::success($result, 'C·∫≠p nh·∫≠t th√†nh c√¥ng');
  }

  /**
   * X√≥a QuanLyBanHang
   */
  public function destroy($id)
  {
    $result = $this->quanLyBanHangService->delete($id);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return CustomResponse::success([], 'X√≥a th√†nh c√¥ng');
  }

  /**
   * L·∫•y danh s√°ch QuanLyBanHang d·∫°ng option
   */
  public function getOptions(Request $request)
  {
    $params = $request->all();

    $params = Helper::validateFilterParams($params);

    $result = $this->quanLyBanHangService->getOptions([
      ...$params,
      'limit' => -1,
    ]);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return CustomResponse::success($result);
  }

  public function getSanPhamByDonHangId($donHangId)
  {
    $result = $this->quanLyBanHangService->getSanPhamByDonHangId($donHangId);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return CustomResponse::success($result);
  }

  public function getSoTienCanThanhToan($donHangId)
  {
    $result = $this->quanLyBanHangService->getSoTienCanThanhToan($donHangId);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return CustomResponse::success($result);
  }

  public function getDonHangByKhachHangId($khachHangId)
  {
    $result = $this->quanLyBanHangService->getDonHangByKhachHangId($khachHangId);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return CustomResponse::success($result);
  }

  public function downloadTemplateExcel()
  {
    $path = public_path('mau-excel/QuanLyBanHang.xlsx');

    if (!file_exists($path)) {
      return CustomResponse::error('File kh√¥ng t·ªìn t·∫°i');
    }

    return response()->download($path);
  }

  public function importExcel(Request $request)
  {
    $request->validate([
      'file' => 'required|file|mimes:xlsx,xls,csv',
    ]);

    try {
      $data = $request->file('file');
      $filename = Str::random(10) . '.' . $data->getClientOriginalExtension();
      $path = $data->move(public_path('excel'), $filename);

      $import = new QuanLyBanHangImport();
      Excel::import($import, $path);

      $thanhCong = $import->getThanhCong();
      $thatBai = $import->getThatBai();

      if ($thatBai > 0) {
        return CustomResponse::error('Import kh√¥ng th√†nh c√¥ng. C√≥ ' . $thatBai . ' b·∫£n ghi l·ªói v√† ' . $thanhCong . ' b·∫£n ghi th√†nh c√¥ng');
      }

      return CustomResponse::success([
        'success' => $thanhCong,
        'fail' => $thatBai
      ], 'Import th√†nh c√¥ng ' . $thanhCong . ' b·∫£n ghi');
    } catch (\Exception $e) {
      return CustomResponse::error('L·ªói import: ' . $e->getMessage(), 500);
    }
  }

  /**
   * Xem tr∆∞·ªõc h√≥a ƒë∆°n HTML
   */
  public function xemTruocHoaDon($id)
  {
    $result = $this->quanLyBanHangService->xemTruocHoaDon($id);

    if ($result instanceof \Illuminate\Http\JsonResponse) {
      return $result;
    }

    return $result; // Tr·∫£ v·ªÅ view HTML
  }

  // ==========================
  // üîΩ PRIVATE HELPER B·ªî SUNG
  // ==========================
  /**
   * G·ªçi service ghi nh·∫≠n "bi·∫øn ƒë·ªông ƒëi·ªÉm" khi ƒë∆°n ƒë√£ thanh to√°n.
   * - Service t·ª± ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ƒë∆°n trong DB.
   * - T·ª± idempotent theo don_hang_id (1 ƒë∆°n 1 bi·∫øn ƒë·ªông).
   * - Kh√¥ng n√©m l·ªói ra ngo√†i ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng flow c·∫≠p nh·∫≠t ƒë∆°n.
   */
  private function tryRecordPaidEvent(int $donHangId): void
  {
    try {
      /** @var \App\Services\MemberPointService $svc */
      $svc = app(MemberPointService::class);
      $svc->recordPaidOrder($donHangId);
    } catch (\Throwable $e) {
      // log l·ªói n·ªôi b·ªô, kh√¥ng ph√° v·ª° response cho FE
      report($e);
    }
  }
}
